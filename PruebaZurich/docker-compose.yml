version: '3.9'

services:
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest  # Última versión de SQL Server
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: ${DB_PASSWORD:-YourStrong!Passw0rd}
      MSSQL_PID: Express  # Puedes usar Developer, Standard o Enterprise según necesidades
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./backend/PruebaZurich.Data/init.sql:/usr/src/init.sql
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P $${SA_PASSWORD} -Q 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      DB_CONNECTION_STRING: "Server=db;Database=${DB_NAME:-PruebaZurichDB};User Id=sa;Password=${DB_PASSWORD:-YourStrong!Passw0rd};TrustServerCertificate=true;"
    ports:
      - "5000:80"
    volumes:
      - ./backend:/app
    networks:
      - backend-network
      - frontend-network

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      NG_CLI_ANALYTICS: "false"
    ports:
      - "4200:80"
    depends_on:
      - backend
    networks:
      - frontend-network

  # Opcional: PGAdmin para gestión visual de la BD
  pgadmin:
    image: dpage/pgadmin4:7.8
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local